{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.upload = upload;\n\nvar _dom = require(\"@testing-library/dom\");\n\nvar _click = require(\"./click\");\n\nvar _blur = require(\"./blur\");\n\nvar _focus = require(\"./focus\");\n\nfunction upload(element, fileOrFiles, init) {\n  if (element.disabled) return;\n  (0, _click.click)(element, init);\n  const input = element.tagName === 'LABEL' ? element.control : element;\n  const files = (Array.isArray(fileOrFiles) ? fileOrFiles : [fileOrFiles]).slice(0, input.multiple ? undefined : 1); // blur fires when the file selector pops up\n\n  (0, _blur.blur)(element, init); // focus fires when they make their selection\n\n  (0, _focus.focus)(element, init); // the event fired in the browser isn't actually an \"input\" or \"change\" event\n  // but a new Event with a type set to \"input\" and \"change\"\n  // Kinda odd...\n\n  const inputFiles = {\n    length: files.length,\n    item: index => files[index],\n    ...files\n  };\n  (0, _dom.fireEvent)(input, (0, _dom.createEvent)('input', input, {\n    target: {\n      files: inputFiles\n    },\n    bubbles: true,\n    cancelable: false,\n    composed: true,\n    ...init\n  }));\n\n  _dom.fireEvent.change(input, {\n    target: {\n      files: inputFiles\n    },\n    ...init\n  });\n}","map":{"version":3,"sources":["/Users/jangsungho/Desktop/study-react/node_modules/@testing-library/user-event/dist/upload.js"],"names":["Object","defineProperty","exports","value","upload","_dom","require","_click","_blur","_focus","element","fileOrFiles","init","disabled","click","input","tagName","control","files","Array","isArray","slice","multiple","undefined","blur","focus","inputFiles","length","item","index","fireEvent","createEvent","target","bubbles","cancelable","composed","change"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,MAAR,GAAiBA,MAAjB;;AAEA,IAAIC,IAAI,GAAGC,OAAO,CAAC,sBAAD,CAAlB;;AAEA,IAAIC,MAAM,GAAGD,OAAO,CAAC,SAAD,CAApB;;AAEA,IAAIE,KAAK,GAAGF,OAAO,CAAC,QAAD,CAAnB;;AAEA,IAAIG,MAAM,GAAGH,OAAO,CAAC,SAAD,CAApB;;AAEA,SAASF,MAAT,CAAgBM,OAAhB,EAAyBC,WAAzB,EAAsCC,IAAtC,EAA4C;AAC1C,MAAIF,OAAO,CAACG,QAAZ,EAAsB;AACtB,GAAC,GAAGN,MAAM,CAACO,KAAX,EAAkBJ,OAAlB,EAA2BE,IAA3B;AACA,QAAMG,KAAK,GAAGL,OAAO,CAACM,OAAR,KAAoB,OAApB,GAA8BN,OAAO,CAACO,OAAtC,GAAgDP,OAA9D;AACA,QAAMQ,KAAK,GAAG,CAACC,KAAK,CAACC,OAAN,CAAcT,WAAd,IAA6BA,WAA7B,GAA2C,CAACA,WAAD,CAA5C,EAA2DU,KAA3D,CAAiE,CAAjE,EAAoEN,KAAK,CAACO,QAAN,GAAiBC,SAAjB,GAA6B,CAAjG,CAAd,CAJ0C,CAIyE;;AAEnH,GAAC,GAAGf,KAAK,CAACgB,IAAV,EAAgBd,OAAhB,EAAyBE,IAAzB,EAN0C,CAMV;;AAEhC,GAAC,GAAGH,MAAM,CAACgB,KAAX,EAAkBf,OAAlB,EAA2BE,IAA3B,EAR0C,CAQR;AAClC;AACA;;AAEA,QAAMc,UAAU,GAAG;AACjBC,IAAAA,MAAM,EAAET,KAAK,CAACS,MADG;AAEjBC,IAAAA,IAAI,EAAEC,KAAK,IAAIX,KAAK,CAACW,KAAD,CAFH;AAGjB,OAAGX;AAHc,GAAnB;AAKA,GAAC,GAAGb,IAAI,CAACyB,SAAT,EAAoBf,KAApB,EAA2B,CAAC,GAAGV,IAAI,CAAC0B,WAAT,EAAsB,OAAtB,EAA+BhB,KAA/B,EAAsC;AAC/DiB,IAAAA,MAAM,EAAE;AACNd,MAAAA,KAAK,EAAEQ;AADD,KADuD;AAI/DO,IAAAA,OAAO,EAAE,IAJsD;AAK/DC,IAAAA,UAAU,EAAE,KALmD;AAM/DC,IAAAA,QAAQ,EAAE,IANqD;AAO/D,OAAGvB;AAP4D,GAAtC,CAA3B;;AAUAP,EAAAA,IAAI,CAACyB,SAAL,CAAeM,MAAf,CAAsBrB,KAAtB,EAA6B;AAC3BiB,IAAAA,MAAM,EAAE;AACNd,MAAAA,KAAK,EAAEQ;AADD,KADmB;AAI3B,OAAGd;AAJwB,GAA7B;AAMD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.upload = upload;\n\nvar _dom = require(\"@testing-library/dom\");\n\nvar _click = require(\"./click\");\n\nvar _blur = require(\"./blur\");\n\nvar _focus = require(\"./focus\");\n\nfunction upload(element, fileOrFiles, init) {\n  if (element.disabled) return;\n  (0, _click.click)(element, init);\n  const input = element.tagName === 'LABEL' ? element.control : element;\n  const files = (Array.isArray(fileOrFiles) ? fileOrFiles : [fileOrFiles]).slice(0, input.multiple ? undefined : 1); // blur fires when the file selector pops up\n\n  (0, _blur.blur)(element, init); // focus fires when they make their selection\n\n  (0, _focus.focus)(element, init); // the event fired in the browser isn't actually an \"input\" or \"change\" event\n  // but a new Event with a type set to \"input\" and \"change\"\n  // Kinda odd...\n\n  const inputFiles = {\n    length: files.length,\n    item: index => files[index],\n    ...files\n  };\n  (0, _dom.fireEvent)(input, (0, _dom.createEvent)('input', input, {\n    target: {\n      files: inputFiles\n    },\n    bubbles: true,\n    cancelable: false,\n    composed: true,\n    ...init\n  }));\n\n  _dom.fireEvent.change(input, {\n    target: {\n      files: inputFiles\n    },\n    ...init\n  });\n}"]},"metadata":{},"sourceType":"script"}